/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root"
import { Route as NotesRouteImport } from "./routes/notes"
import { Route as ErrorRouteImport } from "./routes/error"
import { Route as DriveRouteImport } from "./routes/drive"
import { Route as ContactsRouteImport } from "./routes/contacts"
import { Route as AuthRouteImport } from "./routes/auth"
import { Route as R404RouteImport } from "./routes/404"
import { Route as IndexRouteImport } from "./routes/index"
import { Route as NotesIndexRouteImport } from "./routes/notes/index"
import { Route as DriveIndexRouteImport } from "./routes/drive/index"
import { Route as ContactsIndexRouteImport } from "./routes/contacts/index"
import { Route as AuthIndexRouteImport } from "./routes/auth/index"
import { Route as NotesSplatRouteImport } from "./routes/notes/$"
import { Route as DriveSplatRouteImport } from "./routes/drive/$"
import { Route as ContactsRequestsRouteImport } from "./routes/contacts/requests"
import { Route as ContactsPendingRouteImport } from "./routes/contacts/pending"
import { Route as ContactsOnlineRouteImport } from "./routes/contacts/online"
import { Route as ContactsOfflineRouteImport } from "./routes/contacts/offline"
import { Route as ContactsBlockedRouteImport } from "./routes/contacts/blocked"
import { Route as ContactsAllRouteImport } from "./routes/contacts/all"
import { Route as AuthLoginRouteImport } from "./routes/auth/login"

const NotesRoute = NotesRouteImport.update({
  id: "/notes",
  path: "/notes",
  getParentRoute: () => rootRouteImport,
} as any)
const ErrorRoute = ErrorRouteImport.update({
  id: "/error",
  path: "/error",
  getParentRoute: () => rootRouteImport,
} as any)
const DriveRoute = DriveRouteImport.update({
  id: "/drive",
  path: "/drive",
  getParentRoute: () => rootRouteImport,
} as any)
const ContactsRoute = ContactsRouteImport.update({
  id: "/contacts",
  path: "/contacts",
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: "/auth",
  path: "/auth",
  getParentRoute: () => rootRouteImport,
} as any)
const R404Route = R404RouteImport.update({
  id: "/404",
  path: "/404",
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any)
const NotesIndexRoute = NotesIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => NotesRoute,
} as any)
const DriveIndexRoute = DriveIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => DriveRoute,
} as any)
const ContactsIndexRoute = ContactsIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => ContactsRoute,
} as any)
const AuthIndexRoute = AuthIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => AuthRoute,
} as any)
const NotesSplatRoute = NotesSplatRouteImport.update({
  id: "/$",
  path: "/$",
  getParentRoute: () => NotesRoute,
} as any)
const DriveSplatRoute = DriveSplatRouteImport.update({
  id: "/$",
  path: "/$",
  getParentRoute: () => DriveRoute,
} as any)
const ContactsRequestsRoute = ContactsRequestsRouteImport.update({
  id: "/requests",
  path: "/requests",
  getParentRoute: () => ContactsRoute,
} as any)
const ContactsPendingRoute = ContactsPendingRouteImport.update({
  id: "/pending",
  path: "/pending",
  getParentRoute: () => ContactsRoute,
} as any)
const ContactsOnlineRoute = ContactsOnlineRouteImport.update({
  id: "/online",
  path: "/online",
  getParentRoute: () => ContactsRoute,
} as any)
const ContactsOfflineRoute = ContactsOfflineRouteImport.update({
  id: "/offline",
  path: "/offline",
  getParentRoute: () => ContactsRoute,
} as any)
const ContactsBlockedRoute = ContactsBlockedRouteImport.update({
  id: "/blocked",
  path: "/blocked",
  getParentRoute: () => ContactsRoute,
} as any)
const ContactsAllRoute = ContactsAllRouteImport.update({
  id: "/all",
  path: "/all",
  getParentRoute: () => ContactsRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => AuthRoute,
} as any)

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute
  "/404": typeof R404Route
  "/auth": typeof AuthRouteWithChildren
  "/contacts": typeof ContactsRouteWithChildren
  "/drive": typeof DriveRouteWithChildren
  "/error": typeof ErrorRoute
  "/notes": typeof NotesRouteWithChildren
  "/auth/login": typeof AuthLoginRoute
  "/contacts/all": typeof ContactsAllRoute
  "/contacts/blocked": typeof ContactsBlockedRoute
  "/contacts/offline": typeof ContactsOfflineRoute
  "/contacts/online": typeof ContactsOnlineRoute
  "/contacts/pending": typeof ContactsPendingRoute
  "/contacts/requests": typeof ContactsRequestsRoute
  "/drive/$": typeof DriveSplatRoute
  "/notes/$": typeof NotesSplatRoute
  "/auth/": typeof AuthIndexRoute
  "/contacts/": typeof ContactsIndexRoute
  "/drive/": typeof DriveIndexRoute
  "/notes/": typeof NotesIndexRoute
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute
  "/404": typeof R404Route
  "/error": typeof ErrorRoute
  "/auth/login": typeof AuthLoginRoute
  "/contacts/all": typeof ContactsAllRoute
  "/contacts/blocked": typeof ContactsBlockedRoute
  "/contacts/offline": typeof ContactsOfflineRoute
  "/contacts/online": typeof ContactsOnlineRoute
  "/contacts/pending": typeof ContactsPendingRoute
  "/contacts/requests": typeof ContactsRequestsRoute
  "/drive/$": typeof DriveSplatRoute
  "/notes/$": typeof NotesSplatRoute
  "/auth": typeof AuthIndexRoute
  "/contacts": typeof ContactsIndexRoute
  "/drive": typeof DriveIndexRoute
  "/notes": typeof NotesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  "/": typeof IndexRoute
  "/404": typeof R404Route
  "/auth": typeof AuthRouteWithChildren
  "/contacts": typeof ContactsRouteWithChildren
  "/drive": typeof DriveRouteWithChildren
  "/error": typeof ErrorRoute
  "/notes": typeof NotesRouteWithChildren
  "/auth/login": typeof AuthLoginRoute
  "/contacts/all": typeof ContactsAllRoute
  "/contacts/blocked": typeof ContactsBlockedRoute
  "/contacts/offline": typeof ContactsOfflineRoute
  "/contacts/online": typeof ContactsOnlineRoute
  "/contacts/pending": typeof ContactsPendingRoute
  "/contacts/requests": typeof ContactsRequestsRoute
  "/drive/$": typeof DriveSplatRoute
  "/notes/$": typeof NotesSplatRoute
  "/auth/": typeof AuthIndexRoute
  "/contacts/": typeof ContactsIndexRoute
  "/drive/": typeof DriveIndexRoute
  "/notes/": typeof NotesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | "/"
    | "/404"
    | "/auth"
    | "/contacts"
    | "/drive"
    | "/error"
    | "/notes"
    | "/auth/login"
    | "/contacts/all"
    | "/contacts/blocked"
    | "/contacts/offline"
    | "/contacts/online"
    | "/contacts/pending"
    | "/contacts/requests"
    | "/drive/$"
    | "/notes/$"
    | "/auth/"
    | "/contacts/"
    | "/drive/"
    | "/notes/"
  fileRoutesByTo: FileRoutesByTo
  to:
    | "/"
    | "/404"
    | "/error"
    | "/auth/login"
    | "/contacts/all"
    | "/contacts/blocked"
    | "/contacts/offline"
    | "/contacts/online"
    | "/contacts/pending"
    | "/contacts/requests"
    | "/drive/$"
    | "/notes/$"
    | "/auth"
    | "/contacts"
    | "/drive"
    | "/notes"
  id:
    | "__root__"
    | "/"
    | "/404"
    | "/auth"
    | "/contacts"
    | "/drive"
    | "/error"
    | "/notes"
    | "/auth/login"
    | "/contacts/all"
    | "/contacts/blocked"
    | "/contacts/offline"
    | "/contacts/online"
    | "/contacts/pending"
    | "/contacts/requests"
    | "/drive/$"
    | "/notes/$"
    | "/auth/"
    | "/contacts/"
    | "/drive/"
    | "/notes/"
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  R404Route: typeof R404Route
  AuthRoute: typeof AuthRouteWithChildren
  ContactsRoute: typeof ContactsRouteWithChildren
  DriveRoute: typeof DriveRouteWithChildren
  ErrorRoute: typeof ErrorRoute
  NotesRoute: typeof NotesRouteWithChildren
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/notes": {
      id: "/notes"
      path: "/notes"
      fullPath: "/notes"
      preLoaderRoute: typeof NotesRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/error": {
      id: "/error"
      path: "/error"
      fullPath: "/error"
      preLoaderRoute: typeof ErrorRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/drive": {
      id: "/drive"
      path: "/drive"
      fullPath: "/drive"
      preLoaderRoute: typeof DriveRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/contacts": {
      id: "/contacts"
      path: "/contacts"
      fullPath: "/contacts"
      preLoaderRoute: typeof ContactsRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/auth": {
      id: "/auth"
      path: "/auth"
      fullPath: "/auth"
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/404": {
      id: "/404"
      path: "/404"
      fullPath: "/404"
      preLoaderRoute: typeof R404RouteImport
      parentRoute: typeof rootRouteImport
    }
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/notes/": {
      id: "/notes/"
      path: "/"
      fullPath: "/notes/"
      preLoaderRoute: typeof NotesIndexRouteImport
      parentRoute: typeof NotesRoute
    }
    "/drive/": {
      id: "/drive/"
      path: "/"
      fullPath: "/drive/"
      preLoaderRoute: typeof DriveIndexRouteImport
      parentRoute: typeof DriveRoute
    }
    "/contacts/": {
      id: "/contacts/"
      path: "/"
      fullPath: "/contacts/"
      preLoaderRoute: typeof ContactsIndexRouteImport
      parentRoute: typeof ContactsRoute
    }
    "/auth/": {
      id: "/auth/"
      path: "/"
      fullPath: "/auth/"
      preLoaderRoute: typeof AuthIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    "/notes/$": {
      id: "/notes/$"
      path: "/$"
      fullPath: "/notes/$"
      preLoaderRoute: typeof NotesSplatRouteImport
      parentRoute: typeof NotesRoute
    }
    "/drive/$": {
      id: "/drive/$"
      path: "/$"
      fullPath: "/drive/$"
      preLoaderRoute: typeof DriveSplatRouteImport
      parentRoute: typeof DriveRoute
    }
    "/contacts/requests": {
      id: "/contacts/requests"
      path: "/requests"
      fullPath: "/contacts/requests"
      preLoaderRoute: typeof ContactsRequestsRouteImport
      parentRoute: typeof ContactsRoute
    }
    "/contacts/pending": {
      id: "/contacts/pending"
      path: "/pending"
      fullPath: "/contacts/pending"
      preLoaderRoute: typeof ContactsPendingRouteImport
      parentRoute: typeof ContactsRoute
    }
    "/contacts/online": {
      id: "/contacts/online"
      path: "/online"
      fullPath: "/contacts/online"
      preLoaderRoute: typeof ContactsOnlineRouteImport
      parentRoute: typeof ContactsRoute
    }
    "/contacts/offline": {
      id: "/contacts/offline"
      path: "/offline"
      fullPath: "/contacts/offline"
      preLoaderRoute: typeof ContactsOfflineRouteImport
      parentRoute: typeof ContactsRoute
    }
    "/contacts/blocked": {
      id: "/contacts/blocked"
      path: "/blocked"
      fullPath: "/contacts/blocked"
      preLoaderRoute: typeof ContactsBlockedRouteImport
      parentRoute: typeof ContactsRoute
    }
    "/contacts/all": {
      id: "/contacts/all"
      path: "/all"
      fullPath: "/contacts/all"
      preLoaderRoute: typeof ContactsAllRouteImport
      parentRoute: typeof ContactsRoute
    }
    "/auth/login": {
      id: "/auth/login"
      path: "/login"
      fullPath: "/auth/login"
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRoute
    }
  }
}

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthIndexRoute: typeof AuthIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthIndexRoute: AuthIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface ContactsRouteChildren {
  ContactsAllRoute: typeof ContactsAllRoute
  ContactsBlockedRoute: typeof ContactsBlockedRoute
  ContactsOfflineRoute: typeof ContactsOfflineRoute
  ContactsOnlineRoute: typeof ContactsOnlineRoute
  ContactsPendingRoute: typeof ContactsPendingRoute
  ContactsRequestsRoute: typeof ContactsRequestsRoute
  ContactsIndexRoute: typeof ContactsIndexRoute
}

const ContactsRouteChildren: ContactsRouteChildren = {
  ContactsAllRoute: ContactsAllRoute,
  ContactsBlockedRoute: ContactsBlockedRoute,
  ContactsOfflineRoute: ContactsOfflineRoute,
  ContactsOnlineRoute: ContactsOnlineRoute,
  ContactsPendingRoute: ContactsPendingRoute,
  ContactsRequestsRoute: ContactsRequestsRoute,
  ContactsIndexRoute: ContactsIndexRoute,
}

const ContactsRouteWithChildren = ContactsRoute._addFileChildren(
  ContactsRouteChildren,
)

interface DriveRouteChildren {
  DriveSplatRoute: typeof DriveSplatRoute
  DriveIndexRoute: typeof DriveIndexRoute
}

const DriveRouteChildren: DriveRouteChildren = {
  DriveSplatRoute: DriveSplatRoute,
  DriveIndexRoute: DriveIndexRoute,
}

const DriveRouteWithChildren = DriveRoute._addFileChildren(DriveRouteChildren)

interface NotesRouteChildren {
  NotesSplatRoute: typeof NotesSplatRoute
  NotesIndexRoute: typeof NotesIndexRoute
}

const NotesRouteChildren: NotesRouteChildren = {
  NotesSplatRoute: NotesSplatRoute,
  NotesIndexRoute: NotesIndexRoute,
}

const NotesRouteWithChildren = NotesRoute._addFileChildren(NotesRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  R404Route: R404Route,
  AuthRoute: AuthRouteWithChildren,
  ContactsRoute: ContactsRouteWithChildren,
  DriveRoute: DriveRouteWithChildren,
  ErrorRoute: ErrorRoute,
  NotesRoute: NotesRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
